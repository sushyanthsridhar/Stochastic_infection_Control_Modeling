import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import random  # Import random module
from google.colab import files

# Upload and read the Excel files
uploaded = files.upload()  # Use this in Colab to upload the files
df_pupa = pd.read_excel('Pupa Counts.xlsx')  # Pupa counts file
df_temp = pd.read_excel('Temperatures.xlsx')  # Temperature file

# Extract the Pupa Counts and Temperature columns
pupa_array = df_pupa['Pupa Counts'].tolist()
temperatures = df_temp['Temperature'].tolist()

# Ensure both have the same number of data points
if len(pupa_array) != len(temperatures):
    raise ValueError("Pupa counts and temperature data must have the same number of data points!")

# Regression Coefficients for mortality rate calculation
B0 = -3.858e-2
B1 = 7.0e-3
B2 = 3.656e-3
B3 = -1.0e-2
B4 = 1.0e-2
B5 = -5.0e-4
B6 = 1.0e-3
B12 = -2.5e-4
B13 = 3.0e-4
B23 = -1.327e-3
B123 = 6.029e-5

# Example values for other independent variables (X2 and X3)
X2 = 10  # Temperature fluctuation
X3 = 2   # Adult density

# Function to adjust rate based on temperature thresholds
def adjust_rate_for_temp(rate, temp):
    if temp < 15:
        return 0.5  # No development below 15°C
    elif temp > 35:
        return rate * 0.5  # High mortality at very high temps
    return rate

# List to store calculated mortality rates
mortality_rates = []

# Loop through each temperature in the data and calculate mortality rate
for X1 in temperatures:
    # Calculate Mortality Rate using the regression formula
    Mortality_Rate = (B0 +
                      (B1 * X1) +
                      (B2 * X2) +
                      (B3 * X3) +
                      (B4 * (X3 ** 2)) +
                      (B5 * (X3 ** 3)) +
                      (B6 * (X3 ** 4)) +
                      (B12 * X1 * X2) +
                      (B13 * X1 * X3) +
                      (B23 * X2 * X3) +
                      (B123 * X1 * X2 * X3))

    # Adjust rate for temperature
    Adjusted_Rate = adjust_rate_for_temp(Mortality_Rate, X1)

    # Append the adjusted rate to the list
    mortality_rates.append(Adjusted_Rate)

# Ensure that the length of mortality rates matches the pupa array
assert len(mortality_rates) == len(pupa_array), "Mortality rates and pupa counts do not match!"

# Simulation parameters
weeks = len(pupa_array)  # Number of weeks (from the Pupa Counts file)
adults_array = [0] * weeks  # Initialize an array for adults

# Loop through each week and simulate with the calculated mortality rates
for week in range(weeks):
    # Simulate for the week using the pupa count from the Excel file
    initial_pupa = pupa_array[week]
    mortality_rate = mortality_rates[week]  # Use the corresponding mortality rate

    # Apply mortality to the pupa
    surviving_pupa = initial_pupa * (1 - mortality_rate)

    # Calculate the adult transition based on the number of surviving pupa
    adults_today = surviving_pupa * 0.4  # Assuming 40% of surviving pupa transition to adults

    # Update the number of pupa for the week, accounting for new pupa and mortality
    pupa_today = surviving_pupa - adults_today

    # Ensure pupa don't go negative
    pupa_array[week] = max(0, pupa_today)

    # Update the number of adults for this week
    adults_array[week] = adults_today

    # Print weekly status along with the corresponding mortality rate and temperature
    print(f"Week {week + 1}: {pupa_today:.2f} pupa, {adults_today:.2f} adults, "
          f"Temperature: {temperatures[week]:.2f}°C, Mortality Rate: {mortality_rate:.4f}")

# Final count after all weeks
remaining_pupa = pupa_array[-1]  # Final count of pupa
total_adults = sum(adults_array)  # Total count of adults
print(f"\nRemaining pupa after {weeks} weeks (estimated): {remaining_pupa:.2f}")
print(f"Total adults after {weeks} weeks (estimated): {total_adults:.2f}")

# Plotting the results
weeks_range = list(range(1, weeks + 1))

# Plot 1: Mortality Rates vs. Week Number
plt.figure(figsize=(10, 6))
plt.plot(weeks_range, mortality_rates, marker='o', color='r', label='Mortality Rate')
plt.title('Mortality Rate vs Week Number')
plt.xlabel('Week Number')
plt.ylabel('Mortality Rate')
plt.grid(True)
plt.legend()
plt.show()

# Plot 2: Pupa Counts vs. Week Number (Estimated)
plt.figure(figsize=(10, 6))
plt.plot(weeks_range, [pupa for pupa in pupa_array], marker='o', color='b', label='Pupa Counts (Estimated)')
plt.title('Pupa Counts vs Week Number (Estimated)')
plt.xlabel('Week Number')
plt.ylabel('Pupa Counts (Estimated)')
plt.grid(True)
plt.legend()
plt.show()

# Plot 3: Adults Counts vs. Week Number (Estimated)
plt.figure(figsize=(10, 6))
plt.plot(weeks_range, [adults for adults in adults_array], marker='o', color='g', label='Adults Counts (Estimated)')
plt.title('Adults Counts vs Week Number (Estimated)')
plt.xlabel('Week Number')
plt.ylabel('Adults Counts (Estimated)')
plt.grid(True)
plt.legend()
plt.show()

adults_sorted = np.sort(adults_array)   # Sort and multiply adults counts by random multiplier
cdf = np.arange(len(adults_sorted)) / float(len(adults_sorted))  # Compute CDF

plt.figure(figsize=(10, 6))
plt.plot(adults_sorted, cdf, marker='o', color='purple', label='CDF of Adults Counts (Estimated)')
plt.title('CDF of Adults Counts (Estimated)')
plt.xlabel('Adults Counts (Estimated)')
plt.ylabel('Cumulative Probability')
plt.grid(True)
plt.legend()
plt.show()
